export enum KpcInstructionType {
    Nop = "No operation\n\nIdles for 16 clock cycles",

    Lbrom = "Load byte ROM\n\nLoads byte from ROM to a register at a given address\n\n`reg1` - Destination register\n\n`reg2` - Register containing 16-bit address value",
    Lbromo = "Load byte ROM offset\n\nLoads byte from ROM to a register at a given address with specified offset\n\n`reg1` - Destination register\n\n`reg2` - Register containing 16-bit address value\n\n`reg3` - Register containing 16-bit offset value",
    Lwrom = "Load word ROM\n\nLoads word from ROM to a register at a given address\n\n`reg1` - Destination register\n\n`reg2` - Register containing 16-bit address value",
    Lwromo = "Load word ROM offset\n\nLoads word from ROM to a register at a given address with specified offset\n\n`reg1` - Destination register\n\n`reg2` - Register containing 16-bit address value\n\n`reg3` - Register containing 16-bit offset value",
    Lbram = "Load byte RAM\n\nLoads byte from RAM to a register at a given address\n\n`reg1` - Destination register\n\n`reg2` - Register containing 16-bit address value",
    Lbramo = "Load byte RAM offset\n\nLoads byte from RAM to a register at a given address with specified offset\n\n`reg1` - Destination register\n\n`reg2` - Register containing 16-bit address value\n\n`reg3` - Register containing 16-bit offset value",
    Lwram = "Load word RAM\n\nLoads word from RAM to a register at a given address\n\n`reg1` - Destination register\n\n`reg2` - Register containing 16-bit address value",
    Lwramo = "Load word RAM offset\n\nLoads word from RAM to a register at a given address with specified offset\n\n`reg1` - Destination register\n\n`reg2` - Register containing 16-bit address value\n\n`reg3` - Register containing 16-bit offset value",
    Popb = "Pop byte\n\nLoads byte from ROM to a register at a given address and then subtracts 1 from the address regiser\n\n`reg1` - Destination register\n\n`reg2` - Register containing 16-bit address value (typically $sp)",
    Popw = "Pop word\n\nLoads word from ROM to a register at a given address and then subtracts 2 from the address regiser\n\n`reg1` - Destination register\n\n`reg2` - Register containing 16-bit address value (typically $sp)",
    Lbext = "Load byte external\n\nLoads byte from an External Device to a register at a given address\n\n`reg1` - Destination register\n\n`reg2` - Register containing 16-bit address value",

    Sbram = "Store byte RAM\n\nStores byte in RAM from a register at a given address\n\n`reg1` - Register containing 8-bit value to store\n\n`reg2` - Register containing 16-bit address value",
    SbramI = "Store byte RAM immediate\n\nStores immediate byte value in RAM at a given address\n\n`reg1` - Register containing 16-bit address value\n\n`num` - Immediate 8-bit value to store",
    Sbramo = "Store byte RAM offset\n\nStores byte in RAM from a register at a given address with specified offset\n\n`reg1` - Register containing 8-bit value to store\n\n`reg2` - Register containing 16-bit address value\n\n`reg3` - Register containing 16-bit offset value",
    Swram = "Store word RAM\n\nStores word in RAM from a register at a given address\n\n`reg1` - Register containing 16-bit value to store\n\n`reg2` - Register containing 16-bit address value",
    Swramo = "Store word RAM offset\n\nStores word in RAM from a register at a given address with specified offset\n\n`reg1` - Register containing 16-bit value to store\n\n`reg2` - Register containing 16-bit address value\n\n`reg3` - Register containing 16-bit offset value",
    Pushb = "Push byte\n\nStores byte in RAM from a register at a given address and then adds 1 to the address register\n\n`reg1` - Register containing 8-bit value to store\n\n`reg2` - Register containing 16-bit address value (typically $sp)",
    Pushw = "Push word\n\nStores word in RAM from a register at a given address and then adds 2 to the address register\n\n`reg1` - Register containing 16-bit value to store\n\n`reg2` - Register containing 16-bit address value (typically $sp)",
    Sbext = "Store byte external\n\nStores byte in an External Device from a register at a given address\n\n`reg1` - Register containing 8-bit value to store\n\n`reg2` - Register containing 16-bit address value",

    Add = "Add\n\nAdds two byte values and saves the 8-bit result to a destination register\n\n`reg1` - Destination register\n\n`reg2` - Register A containing 8-bit value\n\n`reg3` - Register B containing 8-bit value",
    AddI = "Add immediate\n\nAdds immediate byte value to a destination register (the result is 8-bit value)\n\n`reg1` - Destination register\n\n`num` - Immediate 8-bit value to add",
    Sub = "Subtract\n\nSubtracts two byte values and saves the 8-bit result to a destination register\n\n`reg1` - Destination register\n\n`reg2` - Register A containing 8-bit value (the minued)\n\n`reg3` - Register B containing 8-bit value (the subtrahend)",
    SubI = "Subtract immediate\n\nSubtracts immediate byte value from a destination register (the result is 8-bit value)\n\n`reg1` - Destination register (the minued)\n\n`num` - Immediate 8-bit value to subtract (the subtrahend)",
    Addw = "Add word\n\nAdds two word values and saves the 16-bit result to a destination register\n\n`reg1` - Destination register\n\n`reg2` - Register A containing 16-bit value\n\n`reg3` - Register B containing 16-bit value",
    Negw = "Negate word\n\nNegates word and saves the 16-bit result (two's complement) to a destination register\n\n`reg1` - Destination register\n\n`reg2` - Register containing 16-bit value to negate",
    Not = "Bitwise NOT\n\nAdds two byte values, then performs bitwise NOT operation on addition result and then saves the 8-bit result to a destination register\n\n`reg1` - Destination register\n\n`reg2` - Register A containing 8-bit value\n\n`reg3` - Register B containing 8-bit value",
    Or = "Bitwise OR\n\nPerforms bitwise OR operation on two byte values and saves the 8-bit result to a destination register\n\n`reg1` - Destination register\n\n`reg2` - Register A containing 8-bit value\n\n`reg3` - Register B containing 8-bit value",
    And = "Bitwise AND\n\nPerforms bitwise AND operation on two byte values and saves the 8-bit result to a destination register\n\n`reg1` - Destination register\n\n`reg2` - Register A containing 8-bit value\n\n`reg3` - Register B containing 8-bit value",
    Xor = "Bitwise XOR\n\nPerforms bitwise NOT operation on two byte values and saves the 8-bit result to a destination register\n\n`reg1` - Destination register\n\n`reg2` - Register A containing 8-bit value\n\n`reg3` - Register B containing 8-bit value",
    Sll = "Shift left logical\n\nAdds two byte values, then shifts logically addition result to the left and then saves the 8-bit result to a destination register\n\n`reg1` - Destination register\n\n`reg2` - Register A containing 8-bit value\n\n`reg3` - Register B containing 8-bit value",
    Srl = "Shift right logical\n\nAdds two byte values, then shifts logically addition result to the right and then saves the 8-bit result to a destination register\n\n`reg1` - Destination register\n\n`reg2` - Register A containing 8-bit value\n\n`reg3` - Register B containing 8-bit value",

    Set = "Set low\n\nSets the lower half of a destination register to the lower half of the other register\n\n`reg1` - Destination register\n\n`reg2` - Other register with 8-bit value to set",
    SetI = "Set low immediate\n\nSets the lower half of a destination register to the immediate byte value\n\n`reg1` - Destination register\n\n`num` - Immediate 8-bit value to set",
    Seth = "Set high\n\nSets the higher half of a destination register to the higher half of the other register\n\n`reg1` - Destination register\n\n`reg2` - Other register with 8-bit value (in higher half) to set",
    SethI = "Set high immediate\n\nSets the higher half of a destination register to the immediate byte value\n\n`reg1` - Destination register\n\n`num` - Immediate 8-bit value to set",
    Setw = "Set word\n\nSets the whole destination register to the value of other register\n\n`reg1` - Destination register\n\n`reg2` - Other register with 16-bit value to set",
    Setloh = "Set low to high and high to low\n\nSets the lower half of a destination register to the higher half of the other register and the higher half of a destination register to a lower half of the other register\n\n`reg1` - Destination register\n\n`reg2` - Other register with 16-bit value to set\n\n*Note*: if `reg1` == `reg2` then the operation results in register flip",
    Swap = "Swap low\n\nSwaps the lower half of A register with the lower half of B register\n\n`reg1` -  Register A with 8-bit value to swap\n\n`reg2` - Register B with 8-bit value to swap",
    Swaph = "Swap high\n\nSwaps the higher half of A register with the higher half of B register\n\n`reg1` -  Register A with 8-bit value (in higher half) to swap\n\n`reg2` - Register B with 8-bit value (in higher half) to swap",
    Swapw = "Swap word\n\nSwaps the whole A register with the whole B register\n\n`reg1` - Register A with 16-bit value to swap\n\n`reg2` - Register B with 16-bit value to swap",
    Swaploh = "Swap low with high and high with low\n\nSwaps the lower half of A register with the higher half of B register and the the higher half of A register with the lower half of B register\n\n`reg1` - Register A with 16-bit value to swap\n\n`reg2` - Register B with 16-bit value to swap",

    Jr = "Jump register\n\nJumps (goto) to an address\n\n`reg1` - Register containing 16-bit address value",
    Jro = "Jump register offset\n\nJumps (goto) to an address with specified offset\n\n`reg1` - Register containing 16-bit address value\n\n`reg2` - Register containing 16-bit offset value",
    Jas = "Jump and save\n\nJumps (goto) to an address and saves the current Program Counter value (next instruction address) to a save register. Used in procedure calls.\n\n`reg1` - Register containing 16-bit address value\n\n`reg2` - Save register (typically $ra)",
    JpcaddI = "Jump program counter add immediate\n\nJumps (goto) to an address calculated as follows: Program Counter value (next instruction address) + 8-bit immediate value\n\n`num` - Immediate 8-bit value to add",
    JpcsubI = "Jump program counter sub immediate\n\nJumps (goto) to an address calculated as follows: Program Counter value (next instruction address) - 8-bit immediate value\n\n`num` - Immediate 8-bit value to subtract (the subtrahend)",

    Irrret = "Interrupt return\n\nReturns from an interrupt",
    Irren = "Interrupt enable\n\nEnables all interrupts",
    Irrdis = "Interrupt disable\n\nDisables all interrupts",

    Jwz = "Jump (if) word zero\n\nJumps (goto) to an address if the whole register value is 0\n\n`reg1` - Register containing 16-bit value to test\n\n`reg2` - Register containing 16-bit address value",
    Jwnotz = "Jump (if) word not zero\n\nJumps (goto) to an address if the whole register value is not 0\n\n`reg1` - Register containing 16-bit value to test\n\n`reg2` - Register containing 16-bit address value",
    Jwn = "Jump (if) word negative\n\nJumps (goto) to an address if the whole register value is negative (value < 0, in 16-bit two's complement)\n\n`reg1` - Register containing 16-bit value to test\n\n`reg2` - Register containing 16-bit address value",
    Jwnotn = "Jump (if) word not negative\n\nJumps (goto) to an address if the whole register value is not negative (value >= 0, in 16-bit two's complement)\n\n`reg1` - Register containing 16-bit value to test\n\n`reg2` - Register containing 16-bit address value",
    Jzf = "Jump (if) zero flag\n\nJumps (goto) to an address if ZF (Zero Flag) is set\n\n`reg1` - Register containing 16-bit address value",
    Jnf = "Jump (if) negative flag\n\nJumps (goto) to an address if NF (Negative Flag) is set\n\n`reg1` - Register containing 16-bit address value",
    Jcf = "Jump (if) carry flag\n\nJumps (goto) to an address if CF (Carry Flag) is set\n\n`reg1` - Register containing 16-bit address value",
    Jof = "Jump (if) overflow flag\n\nJumps (goto) to an address if OF (Overflow Flag) is set\n\n`reg1` - Register containing 16-bit address value",
}